/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// #define QWERTY_BASE 1

#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

// #define BAS_L 0
// #define NAV_L 1
// #define NUM_L 2
// #define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

//     conditional_layers {
//        compatible = "zmk,conditional-layers";
// 	tri_layer {
// 	    if-layers = <NAV_L NUM_L>;
// 	    then-layer = <SYM_L>;
// 	};

//     };

//         behaviors {
        
//         td_lalt: tap_dance_0 {
//             compatible = "zmk,behavior-tap-dance";
//             label = "TAP_DANCE_LALT";
//             #binding-cells = <0>;
//             tapping-term-ms = <200>;
//             bindings = <&mt LEFT_ALT DEL>, <&kp DEL>;
//         };

//         td_lextra: tap_dance_1 {
//             compatible = "zmk,behavior-tap-dance";
//             label = "TAP_DANCE_LGUI";
//             #binding-cells = <0>;
//             tapping-term-ms = <200>;
//             bindings = <&kp LEFT_GUI>, <&mo 5>, <&mo 6>;
//         };

//         td_lctl: tap_dance_2 {
//             compatible = "zmk,behavior-tap-dance";
//             label = "TAP_DANCE_LCTL";
//             #binding-cells = <0>;
//             tapping-term-ms = <200>;
//             bindings = <&kp LEFT_CONTROL>, <&mo 4>, <&tog 2>;

//         td_rextra: tap_dance_3 {
//             compatible = "zmk,behavior-tap-dance";
//             label = "TAP_DANCE_RALT";
//             #binding-cells = <0>;
//             tapping-term-ms = <200>;
//             bindings = <&mt RIGHT_ALT DEL>, <&kp DEL>;
//         };

//         td_rgui: tap_dance_4 {
//             compatible = "zmk,behavior-tap-dance";
//             label = "TAP_DANCE_RGUI";
//             #binding-cells = <0>;
//             tapping-term-ms = <200>;
//             bindings = <&kp RIGHT_GUI>, <&mo 5>;
//         };

//         td_rctl: tap_dance_5 {
//             compatible = "zmk,behavior-tap-dance";
//             label = "TAP_DANCE_RCTL";
//             #binding-cells = <0>;
//             tapping-term-ms = <200>;
//             bindings = <&kp RIGHT_CONTROL>, <&mo 4>;
//         };

//     };

    keymap {
        compatible = "zmk,keymap";

        0 {
            label = "Base";
            bindings = <
#ifdef QWERTY_BASE
        &kp ESC    &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp BSP
        &kp TAB    &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp SEMI      &kp QUOT
        &kp LSHFT  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      &kp RET
#else
        &kp ESC    &kp Q      &kp W      &kp E      &kp R        &kp T       &kp Y       &kp U      &kp I         &kp O      &kp P      &kp BSPC        
        &kp TAB    &kp A      &kp S      &kp D      &kp F        &kp G       &kp H       &kp J      &kp K         &kp L      &kp SQT    &kp ENTER       
        &kp LSHFT  &kp Z      &kp X      &kp C      &kp V        &kp B       &kp N       &kp M      &kp COMMA     &kp DOT    &kp SLASH  &kp RSHFT
#endif
#ifdef TBLE_DUAL_2U
        &kp LCTRL  &kp LALT      &lt NAV_L SPACE                &lt NUM_L SPACE              &kp RALT    &kp RCTRL
#elif defined(TBLE_MIT)
        &kp LCTRL  &kp LALT    &mo NAV_L          &kp SPACE                   &mo NUM_L      &kp RALT    &kp RCTRL
#else
        &mo 2   &kp LCTRL   &mt LALT DEL   &lt 1 SPACE   &lt 1 SPACE   &kp RGUI   &kp RCTRL   &mo 3
#endif
            >;
        };

        1 {
            label = "NavNumPad";
            bindings = <
        &kp GRAVE  &kp HOME   &kp UP     &kp END    &kp PLUS   &kp LPAR    &kp RPAR    &kp N7    &kp N8      &kp N9      &kp DEL    &kp BSPC     
        &kp TAB    &kp LEFT   &kp DOWN   &kp RIGHT  &kp EQUAL  &kp LBRC    &kp RBRC    &kp N4    &kp N5      &kp N6      &kp SEMI   &kp ENTER    
        &kp LSHFT  &kp PIPE   &kp UNDER  &kp COLON  &kp MINUS  &kp LBKT    &kp RBKT    &kp N1    &kp N2      &kp N3      &kp BSLH   &kp RSHFT    
#ifdef TBLE_DUAL_2U
       &trans     &trans              &trans                    &trans       &trans         &trans
#elif defined(TBLE_MIT)
        &trans     &trans      &trans                &trans             &trans      &trans   &trans
#else
        &trans   &trans   &trans   &lt 2 SPACE   &lt 2 SPACE   &kp N0   &kp DOT   &trans 
#endif
            >;
        };

        2 {
            label = "NumRowFunc";
            bindings = <
        &kp N1     &kp N2     &kp N3     &kp N4      &kp N5      &kp N6      &kp N7     &kp N8     &kp N9      &kp N0      &kp MINUS  &kp EQUAL    
        &kp EXCL   &kp AT     &kp HASH   &kp DLLR    &kp PRCNT   &kp CARET   &kp AMPS   &kp ASTRK  &kp LPAR    &kp RPAR    &kp UNDER  &kp PLUS   
        &kp F1     &kp F2     &kp F3     &kp F4      &kp F5      &kp F6      &kp F7     &kp F8     &kp F9      &kp F10     &kp F11    &kp F12    
#ifdef TBLE_DUAL_2U
        &trans     &kp N0              &kp MINUS                 &trans            &trans         &trans
#elif defined(TBLE_MIT)
        &trans     &kp N0      &kp MINUS           &none            &kp ESC        &kp DEL      &trans
#else
        &trans   &kp CAPS   &kp C_PP   &kp SPACE   &kp SPACE   &kp C_PREV   &kp C_NEXT   &trans 
#endif
            >;
        };

        3 {
            label = "Bluetooth";
            bindings = <
       &kp T   &trans   &trans   &trans   &trans   &trans     &trans   &trans   &trans   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2   
       &trans   &trans   &trans   &trans   &trans   &trans     &trans   &trans   &trans   &trans       &trans       &trans   
       &trans   &trans   &trans   &trans   &trans   &trans     &trans   &trans   &trans   &trans       &trans       &bt BT_CLR   
#ifdef TBLE_DUAL_2U
        &trans     &kp LS(N0)              &trans                    &trans       &trans         &trans
#elif defined(TBLE_MIT)
        &trans     &kp LS(N0)      &trans                &trans             &trans      &trans   &trans
#else
        &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans 
#endif
            >;
        };

    };
};

